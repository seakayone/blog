<?xml version="1.0"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Systemic Blog</title>
    <link >http://seakayone.github.io</link>
    <atom:link href="http://seakayone.github.io/feed.xml" rel="self" type="application/rss+xml" />
    <description>Blog about software handicraft and engineering</description>
    <language>en-gb</language>
    <pubDate>Sat, 26 May 2018 01:46:33 +0200</pubDate>
    <lastBuildDate>Sat, 26 May 2018 01:46:33 +0200</lastBuildDate>

    <item>
      <title>Java: Null Handling with Optional</title>
      <link >http://seakayone.github.io/blog/2018/null-handling-with-javas-optional.html</link>
      <pubDate>Thu, 24 May 2018 00:00:00 +0200</pubDate>
      <guid isPermaLink="false">blog/2018/null-handling-with-javas-optional.html</guid>
      <description>&amp;lt;div class=&amp;quot;paragraph&amp;quot;&amp;gt; 
 &amp;lt;p&amp;gt;Java has made &amp;lt;a href=&amp;quot;https://www.infoq.com/presentations/Null-References-The-Billion-Dollar-Mistake-Tony-Hoare&amp;quot;&amp;gt;the billion dollar mistake&amp;lt;/a&amp;gt;. Its creators decided it is a good idea to implement the &amp;lt;code&amp;gt;null&amp;lt;/code&amp;gt; reference. This reference leads developers having to deal a lot with unexpected behaviours and the ubiquitious &amp;lt;code&amp;gt;NullPointerException&amp;lt;/code&amp;gt;. The problem with &amp;lt;code&amp;gt;null&amp;lt;/code&amp;gt; is that it does not provide convenient ways to deal with its presence other than checking for its existence. This way it is subverting any type system, making the code hard to read and debug and possibly leads to bad design.&amp;lt;/p&amp;gt; 
&amp;lt;/div&amp;gt; 
&amp;lt;div class=&amp;quot;paragraph&amp;quot;&amp;gt; 
 &amp;lt;p&amp;gt;Have you ever seen code with lots of nested if statements and cringed?&amp;lt;/p&amp;gt; 
&amp;lt;/div&amp;gt; 
&amp;lt;div class=&amp;quot;listingblock&amp;quot;&amp;gt; 
 &amp;lt;div class=&amp;quot;content&amp;quot;&amp;gt; 
  &amp;lt;pre class=&amp;quot;prettyprint highlight&amp;quot;&amp;gt;&amp;lt;code class=&amp;quot;language-java&amp;quot; data-lang=&amp;quot;java&amp;quot;&amp;gt;Foo foo = someMethodWhichReturnsFooOrNull();
if (foo != null) {
  Bar bar = foo.getBar(); // foo.getBar() returns Bar or null
  if (bar != null) {
    bar.doBaz();
  }
}&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt; 
 &amp;lt;/div&amp;gt; 
&amp;lt;/div&amp;gt; 
&amp;lt;div class=&amp;quot;paragraph&amp;quot;&amp;gt; 
 &amp;lt;p&amp;gt;Using Java 8â€™s &amp;lt;code&amp;gt;Optional&amp;amp;lt;T&amp;amp;gt;&amp;lt;/code&amp;gt; type and method references we could simplify the above code to look like this:&amp;lt;/p&amp;gt; 
&amp;lt;/div&amp;gt; 
&amp;lt;div class=&amp;quot;listingblock&amp;quot;&amp;gt; 
 &amp;lt;div class=&amp;quot;content&amp;quot;&amp;gt; 
  &amp;lt;pre class=&amp;quot;prettyprint highlight&amp;quot;&amp;gt;&amp;lt;code class=&amp;quot;language-java&amp;quot; data-lang=&amp;quot;java&amp;quot;&amp;gt;someMethodWhichReturnsOptionalFoo()
  .flatMap(Foo::getBarOptional())
  .ifPresent(Bar::doBaz);&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt; 
 &amp;lt;/div&amp;gt; 
&amp;lt;/div&amp;gt; 
&amp;lt;div class=&amp;quot;paragraph&amp;quot;&amp;gt; 
 &amp;lt;p&amp;gt;IMHO this would make the code not only shorter but also easier to read. The &amp;lt;code&amp;gt;Optional&amp;lt;/code&amp;gt; seems to sooth our pain. Essentially &amp;lt;code&amp;gt;Optional&amp;lt;/code&amp;gt; models the behaviour that a value can be present or absent and this way provides certain operations which will be executed if and only if the value is present seemingly making the dreaded &amp;lt;code&amp;gt;NullPointerException&amp;lt;/code&amp;gt; vanish.&amp;lt;/p&amp;gt; 
&amp;lt;/div&amp;gt; 
&amp;lt;div class=&amp;quot;paragraph&amp;quot;&amp;gt; 
 &amp;lt;p&amp;gt;All good, right? This should allow us to write better code in terms of readability and null safeness. Not entirely: Unfortunately Java still allows to return null for any method. This means that even methods with a return value of &amp;lt;code&amp;gt;Optional&amp;lt;/code&amp;gt; can actually return &amp;lt;code&amp;gt;null&amp;lt;/code&amp;gt;. In the example above for example if the &amp;lt;code&amp;gt;getBarOptional&amp;lt;/code&amp;gt; method returns &amp;lt;code&amp;gt;null&amp;lt;/code&amp;gt; we would get a &amp;lt;code&amp;gt;NullPointerException&amp;lt;/code&amp;gt; from the &amp;lt;code&amp;gt;flatMap&amp;lt;/code&amp;gt; as this (&amp;lt;a href=&amp;quot;https://developer.atlassian.com/blog/2015/08/optional-broken/&amp;quot;&amp;gt;admittedly awkwardly&amp;lt;/a&amp;gt;) requires the return value to be not &amp;lt;code&amp;gt;null&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt; 
&amp;lt;/div&amp;gt; 
&amp;lt;div class=&amp;quot;paragraph&amp;quot;&amp;gt; 
 &amp;lt;p&amp;gt;So we are back at square one leaving developers behind with only self-discipline and code. With &amp;lt;code&amp;gt;Optional&amp;lt;/code&amp;gt; the code will at least be more readable though.&amp;lt;/p&amp;gt; 
&amp;lt;/div&amp;gt; 
&amp;lt;div class=&amp;quot;paragraph&amp;quot;&amp;gt; 
 &amp;lt;p&amp;gt;In a later article I will present a way how to statically analyse our code and ensuring that &amp;lt;code&amp;gt;null&amp;lt;/code&amp;gt; is never returned accidentally. I will also show how to use annotations to make it clearer for a developer that one has to deal with &amp;lt;code&amp;gt;null&amp;lt;/code&amp;gt;, making writing Java more like the Kotlin way of handling &amp;lt;code&amp;gt;null&amp;lt;/code&amp;gt; in that preventing the use of &amp;lt;code&amp;gt;null&amp;lt;/code&amp;gt; will become the default way of writing code.&amp;lt;/p&amp;gt; 
&amp;lt;/div&amp;gt;</description>
    </item><item>
      <title>Recursively Remove Lines in Files</title>
      <link >http://seakayone.github.io/blog/2018/recursively-remove-lines-in-iles.html</link>
      <pubDate>Sun, 20 May 2018 00:00:00 +0200</pubDate>
      <guid isPermaLink="false">blog/2018/recursively-remove-lines-in-iles.html</guid>
      <description>&amp;lt;div class=&amp;quot;paragraph&amp;quot;&amp;gt; 
 &amp;lt;p&amp;gt;Sometimes you would like to delete all lines containing a certain &amp;lt;code&amp;gt;KEYWORD&amp;lt;/code&amp;gt; word for all files contained in a folder all of it child folders.&amp;lt;/p&amp;gt; 
&amp;lt;/div&amp;gt; 
&amp;lt;div class=&amp;quot;paragraph&amp;quot;&amp;gt; 
 &amp;lt;p&amp;gt;When using macOs you can simply do the following:&amp;lt;/p&amp;gt; 
&amp;lt;/div&amp;gt; 
&amp;lt;div class=&amp;quot;literalblock&amp;quot;&amp;gt; 
 &amp;lt;div class=&amp;quot;content&amp;quot;&amp;gt; 
  &amp;lt;pre&amp;gt;find . -type f -iname &amp;quot;*.properties&amp;quot; -print0|xargs -0 sed -i &amp;#39;&amp;#39; /KEYWORD/d&amp;lt;/pre&amp;gt; 
 &amp;lt;/div&amp;gt; 
&amp;lt;/div&amp;gt; 
&amp;lt;div class=&amp;quot;paragraph&amp;quot;&amp;gt; 
 &amp;lt;p&amp;gt;The parameter &amp;lt;code&amp;gt;-iname &amp;quot;*.properties&amp;lt;/code&amp;gt; will only take files with the ending &amp;lt;code&amp;gt;properties&amp;lt;/code&amp;gt; into account.&amp;lt;/p&amp;gt; 
&amp;lt;/div&amp;gt; 
&amp;lt;div class=&amp;quot;paragraph&amp;quot;&amp;gt; 
 &amp;lt;p&amp;gt;Have a look on the &amp;lt;a href=&amp;quot;https://superuser.com/questions/445514/finding-and-deleting-lines-from-all-files-recursively&amp;quot;&amp;gt;related topic on Stackoverflow&amp;lt;/a&amp;gt; where you can find alternatives for &amp;lt;code&amp;gt;zsh&amp;lt;/code&amp;gt; and GNU sed.&amp;lt;/p&amp;gt; 
&amp;lt;/div&amp;gt;</description>
    </item><item>
      <title>EuroSciPy Conference 2016</title>
      <link >http://seakayone.github.io/blog/2016/euro-sci-py-2016.html</link>
      <pubDate>Sat, 27 Aug 2016 00:00:00 +0200</pubDate>
      <guid isPermaLink="false">blog/2016/euro-sci-py-2016.html</guid>
      <description>&amp;lt;div class=&amp;quot;paragraph&amp;quot;&amp;gt; 
 &amp;lt;p&amp;gt;Being a Java and (sometimes) Scala developer on a daily basis I have thought to give it a try and take a look beyond my own nose. Thus I have been attended the &amp;lt;a href=&amp;quot;https://www.euroscipy.org/2016/program/&amp;quot;&amp;gt;EuroSciPy Conference 2016&amp;lt;/a&amp;gt;.&amp;lt;/p&amp;gt; 
&amp;lt;/div&amp;gt; 
&amp;lt;div class=&amp;quot;paragraph&amp;quot;&amp;gt; 
 &amp;lt;p&amp;gt;These are some talks I really enjoyed and seem worthy of mention:&amp;lt;/p&amp;gt; 
&amp;lt;/div&amp;gt; 
&amp;lt;div class=&amp;quot;ulist&amp;quot;&amp;gt; 
 &amp;lt;ul&amp;gt; 
  &amp;lt;li&amp;gt; &amp;lt;p&amp;gt;&amp;lt;a href=&amp;quot;http://gael-varoquaux.info/&amp;quot;&amp;gt;Gael Varoquaux&amp;lt;/a&amp;gt;: Writing Code for Science&amp;lt;/p&amp;gt; &amp;lt;/li&amp;gt; 
  &amp;lt;li&amp;gt; &amp;lt;p&amp;gt;&amp;lt;a href=&amp;quot;http://www2.mpia-hd.mpg.de/~robitaille/&amp;quot;&amp;gt;Thomas Robitaille&amp;lt;/a&amp;gt;: &amp;lt;a href=&amp;quot;https://www.euroscipy.org/2016/schedule/sessions/25/&amp;quot;&amp;gt;Interactive multi-dimensional data exploration and linking with Glue&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt; &amp;lt;/li&amp;gt; 
  &amp;lt;li&amp;gt; &amp;lt;p&amp;gt;&amp;lt;a href=&amp;quot;http://ogrisel.com/&amp;quot;&amp;gt;Olivier Grisel&amp;lt;/a&amp;gt;: &amp;lt;a href=&amp;quot;https://www.euroscipy.org/2016/schedule/sessions/21/&amp;quot;&amp;gt;Cluster Computing with Docker&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt; &amp;lt;/li&amp;gt; 
  &amp;lt;li&amp;gt; &amp;lt;p&amp;gt;Holger Peters: &amp;lt;a href=&amp;quot;https://www.euroscipy.org/2016/schedule/sessions/30/&amp;quot;&amp;gt;Data Science, Python and the Functional Programming Revolution&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt; &amp;lt;/li&amp;gt; 
 &amp;lt;/ul&amp;gt; 
&amp;lt;/div&amp;gt;</description>
    </item>

  </channel>
</rss>
